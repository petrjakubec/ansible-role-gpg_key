---
# ref https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html

- name: "Ensure {{ gpg_key_basedir }}/{{ gpg_key_gen_path }} directory exists with right permissions"
  file:
    dest: "~/{{ gpg_key_basedir }}/{{ gpg_key_gen_path }}"
    state: directory
    mode: 0700
  become: yes
  become_user: "{{ gpg_key_user }}"

- name: Check existing secret key
  shell: "gpg2 --list-secret-keys | grep '{{ gpg_key_gen_uid }}'"
  changed_when: false
  ignore_errors: true
  register: gpg_keys
  become: yes
  become_user: "{{ gpg_key_user }}"

- name: Copy generate_script
  template:
    src: "generate_script.j2"
    dest: "~/{{ gpg_key_basedir }}/{{ gpg_key_gen_path }}/generate_script"
    mode: 0600
  become: yes
  become_user: "{{ gpg_key_user }}"
  when: gpg_keys.stdout == ""

- name: Generate new secret key
  command: "gpg2 --batch --gen-key ~/{{ gpg_key_basedir }}/{{ gpg_key_gen_path }}/generate_script"
  args:
    chdir: "~/{{ gpg_key_basedir }}"
  become: yes
  become_user: "{{ gpg_key_user }}"
  when: gpg_keys.stdout == ""

- name: Shred generate_script
  command: "shred -u -z '{{ gpg_key_basedir }}/{{ gpg_key_gen_path }}/generate_script'"
  args:
    chdir: "~"
  become: yes
  become_user: "{{ gpg_key_user }}"
  when: gpg_keys.stdout == ""

- name: Import generated secret key
  command: "gpg2 --import '{{ gpg_key_basedir }}/{{ gpg_key_gen_path }}/{{ gpg_key_gen_files.public }}'"
  args:
    chdir: "~"
  become: yes
  become_user: "{{ gpg_key_user }}"
  when: gpg_keys.stdout == ""

- name: Generate secret key fingerprint file
  shell: "gpg2 --fingerprint '{{ gpg_key_gen_uid }}' | awk -F= '/Key fingerprint/ { gsub(/ /,\"\", $2); print $2 }' > '{{ gpg_key_basedir }}/{{ gpg_key_gen_path }}/{{ gpg_key_gen_files.fingerprint }}'"
  args:
    chdir: "~"
  changed_when: false
  become: yes
  become_user: "{{ gpg_key_user }}"

- name: Generate secret key public ASCII file
  shell: "gpg2 --armor --export '{{ gpg_key_gen_uid }}' > '{{ gpg_key_basedir }}/{{ gpg_key_gen_path }}/{{ gpg_key_gen_files.public_asc }}'"
  args:
    chdir: "~"
  changed_when: false
  become: yes
  become_user: "{{ gpg_key_user }}"

- name: Generate secret key uid file
  shell: "echo '{{ gpg_key_gen_uid }}' > '{{ gpg_key_basedir }}/{{ gpg_key_gen_path }}/{{ gpg_key_gen_files.uid }}'"
  args:
    chdir: "~"
  changed_when: false
  become: yes
  become_user: "{{ gpg_key_user }}"

- name: Generate secret key public id file
  shell: "gpg2 --list-keys '{{ gpg_key_gen_uid }}' | sed -n '/^pub/p' | awk -F ' ' '{print $2}' | awk -F '/' '{print $2}' > '{{ gpg_key_basedir }}/{{ gpg_key_gen_path }}/{{ gpg_key_gen_files.public_id }}'"
  args:
    chdir: "~"
  changed_when: false
  become: yes
  become_user: "{{ gpg_key_user }}"

- name: Generate secret key private id file
  shell: "gpg2 --list-secret-keys '{{ gpg_key_gen_uid }}' | sed -n '/^sec/p' | awk -F ' ' '{print $2}' | awk -F '/' '{print $2}' > '{{ gpg_key_basedir }}/{{ gpg_key_gen_path }}/{{ gpg_key_gen_files.private_id }}'"
  args:
    chdir: "~"
  changed_when: false
  become: yes
  become_user: "{{ gpg_key_user }}"

- name: Fetch files to local
  fetch:
    src: "~/{{ gpg_key_basedir }}/{{ gpg_key_gen_path }}/{{ gpg_key_gen_files[item] }}"
    dest: "{{ gpg_key_gen_fetch_dest_basedir }}/{{ item }}"
    flat: "{{ gpg_key_gen_fetch_flat }}"
  become: yes
  become_user: "{{ gpg_key_user }}"
  with_items: "{{ gpg_key_gen_fetch_files }}"
